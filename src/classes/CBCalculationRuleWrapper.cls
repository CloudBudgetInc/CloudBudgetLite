/**
 * Copyright (c) 2022, CloudBudget, Inc.
 * Alex JR 12/28/2022
 * All rights reserved.
 * Redistribution and use in source and binary forms, with or without modification,
 * are permitted provided that the following conditions are met:
 * Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 * Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 * Neither the name of the CloudBudget, Inc. nor the names of its contributors
 * may be used to endorse or promote products derived from this software
 * without specific prior written permission.
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
 * INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 * BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED
 * OF THE POSSIBILITY OF SUCH DAMAGE.
 * <p/>
 * Special wrapper for auto budget line generated by calculation rule
 */
public with sharing class CBCalculationRuleWrapper {
	//////////////////////////////////// CONSTANTS ////////////////////////////////////
	static final List<String> ANALYTICS = new List<String>{
			'BudgetYear', 'Account', 'Division', 'Variable1', 'Variable2', 'Variable3', 'Variable4', 'Variable5', 'Scenario'
	};
	//////////////////////////////////// CONSTANTS ////////////////////////////////////

	//////////////////////////////////// WRAPPER FIELDS ////////////////////////////////////
	cblight__CBCalculationRule__c cr;
	String baseLayerId;
	String varLayerId;

	cblight__CBBudgetLine__c sourceBL; // budget line with source analytics and amounts
	List<cblight__CBAmount__c> sourceBLAmounts;

	public cblight__CBBudgetLine__c resultBL; // newly generated budget line
	public List<cblight__CBAmount__c> resultBLAmounts;

	cblight__CBNonFinancialLibrary__c baseNFL; // NFL to store budget amounts
	List<cblight__CBNonFinancialItem__c> baseNFLItems;

	cblight__CBNonFinancialLibrary__c varNFL; // NFL to store a calculation rule coefficient (Var)
	List<cblight__CBNonFinancialItem__c> varNFLItems;

	cblight__CBNonFinancialLibrary__c staticNFL; // static NFL (may be selected in a calculation rule) that takes part in calculation
	List<cblight__CBNonFinancialItem__c> staticNFLItems;
	//////////////////////////////////// WRAPPER FIELDS ////////////////////////////////////

	//////////////////////////////////// CONSTRUCTOR ////////////////////////////////////
	public CBCalculationRuleWrapper(cblight__CBBudgetLine__c sourceBL, cblight__CBCalculationRule__c cr, cblight__CBNonFinancialLibrary__c NFL, String baseLayerId, String varLayerId, List<CBAmount__c>sourceBLAmounts) {
		this.sourceBL = sourceBL;
		this.cr = cr;
		this.sourceBLAmounts = sourceBLAmounts == null ? sourceBL.CBAmounts__r : sourceBLAmounts;
		this.staticNFL = NFL;
		this.staticNFLItems = NFL == null ? null : NFL.NonFinancialItems__r;
		this.baseLayerId = baseLayerId;
		this.varLayerId = varLayerId;
		doInit();
	}
	public CBCalculationRuleWrapper(cblight__CBBudgetLine__c sourceBL, cblight__CBCalculationRule__c cr) { // for allocation terms purpose
		this.sourceBL = sourceBL;
		this.sourceBLAmounts = sourceBLAmounts == null ? sourceBL.CBAmounts__r : sourceBLAmounts;
		this.cr = cr;
		generateResultBL();
		this.resultBL.isFormulaBudgetLine__c = false;
		this.resultBL.DrillDownIds__c = sourceBL.Id;
	}
	//////////////////////////////////// CONSTRUCTOR ////////////////////////////////////

	//////////////////////////////////// INTERNAL METHODS ////////////////////////////////////
	/**
	 * Method operates generation of NFLa and an auto budget line
	 */
	private void doInit() {
		generateBaseNFL();
		generateVarNFL();
		generateResultBL();
		generateResultAmounts();
		applyPeriodShift();
	}

	/**
	 * Method creates base amounts custom NFL for an auto budget line
	 */
	private void generateBaseNFL() {
		this.baseNFL = new cblight__CBNonFinancialLibrary__c(Type__c = 'Custom', Layer__c = this.baseLayerId, Name = 'Budget Line');
		this.baseNFLItems = new List<cblight__CBNonFinancialItem__c>();
		for (cblight__CBAmount__c a : sourceBLAmounts) {
			baseNFLItems.add(new cblight__CBNonFinancialItem__c(Value__c = a.Value__c, CBPeriod__c = a.CBPeriod__c));
		}
	}

	/**
	 * Method creates custom NFL with a calculation rule variable for an budget line
	 */
	private void generateVarNFL() {
		if (this.cr.cblight__Value__c == 0 || this.cr.cblight__Value__c == null) {
			return;
		}
		this.varNFL = new cblight__CBNonFinancialLibrary__c(Type__c = 'Custom', Layer__c = this.varLayerId, Name = 'CR Value');
		this.varNFLItems = new List<cblight__CBNonFinancialItem__c>();
		for (cblight__CBAmount__c a : sourceBLAmounts) {
			this.varNFLItems.add(new cblight__CBNonFinancialItem__c(Value__c = cr.Value__c, CBPeriod__c = a.CBPeriod__c));
		}
	}

	/**
	 * Method creates an auto budget line
	 */
	private void generateResultBL() {
		String defaultBLName = (cr.Mode__c == 'many-to-one') ? 'Grouped Auto Line' : 'Auto Line';
		this.resultBL = new cblight__CBBudgetLine__c(Name = cr.cblight__ResultName__c == null ? defaultBLName : cr.cblight__ResultName__c,
				isFormulaBudgetLine__c = true, CBScenario__c = this.sourceBL.CBScenario__c,
				NFLFormula__c = cr.Formula__c, cblight__CBCalculationRule__c = cr.Id);

		for (String f : ANALYTICS) {
			String booleanKey = 'cblight__copy' + f + '__c', analyticKey = 'cblight__CB' + f + '__c';
			this.resultBL.put(analyticKey, (Boolean) cr.get(booleanKey) ? (String) this.sourceBL.get(analyticKey) : (String) this.cr.get(analyticKey));
		}
	}

	/**
	 * Method creates a list of auto budget line amounts
	 */
	private void generateResultAmounts() {
		this.resultBLAmounts = new List<cblight__CBAmount__c>();
		for (cblight__CBAmount__c a : this.sourceBLAmounts) {
			cblight__CBAmount__c rAmount = a.clone(false, true, false, false);
			rAmount.cblight__Value__c = 0;
			this.resultBLAmounts.add(rAmount);
		}
		List<List<CBNonFinancialItem__c>> sourceNFL = new List<List<CBNonFinancialItem__c>>();
		sourceNFL.add(this.baseNFLItems);
		if (this.varNFLItems != null) sourceNFL.add(this.varNFLItems);
		if (this.staticNFLItems != null) sourceNFL.add(this.staticNFLItems);

		this.resultBLAmounts = CBFormulaService.calculateFormulaTotals(this.resultBLAmounts, sourceNFL, cr.cblight__Formula__c);
	}

	/**
	 * The method shift periods in result budget line
	 */
	private void applyPeriodShift() {
		if (this.cr.PeriodShift__c == null || this.cr.PeriodShift__c == 0) return;
		Integer listSize = this.resultBLAmounts.size();
		Integer shift = this.cr.PeriodShift__c.intValue();
		Map<String, String> periodIdAmountMap = new Map<String, String>();
		List<cblight__CBAmount__c> updatedAmounts = new List<CBAmount__c>();
		for (CBAmount__c a : this.resultBLAmounts) updatedAmounts.add(a.clone(false, true, false, false));
		for (CBAmount__c a : updatedAmounts) a.Value__c = 0;
		for (Integer i = 0; i < listSize; i++) {
			Decimal oldAmount = this.resultBLAmounts[i].Value__c;
			if (i + shift >= listSize) { // go to the last month
				updatedAmounts[listSize - 1].Value__c += oldAmount;
			} else {
				updatedAmounts[i + shift].Value__c += oldAmount;
			}
		}
		this.resultBLAmounts = updatedAmounts;
		this.baseNFL = null;
		this.varNFL = null;
		this.staticNFL = null;
		this.resultBL.isFormulaBudgetLine__c = false;
		this.resultBL.NFL1__c = this.resultBL.NFL2__c = this.resultBL.NFL3__c = this.resultBL.NFL4__c = null;
	}
	//////////////////////////////////// INTERNAL METHODS ////////////////////////////////////

	//////////////////////////////////// EXTERNAL METHODS ////////////////////////////////////
	/**
	 * Method serves to remap and insert newly created records to the database
	 *
	 * @param wrappers ready to insert wrappers with NFL? budget line and amounts
	 */
	public static void insertResultBudgetLines(List<CBCalculationRuleWrapper> wrappers) {
		fflib_SObjectUnitOfWork uow = new fflib_SObjectUnitOfWork(
				new List<SObjectType>{
						CBNonFinancialLibrary__c.SObjectType,
						CBBudgetLine__c.SObjectType,
						CBAmount__c.SObjectType
				}
		);

		for (CBCalculationRuleWrapper w : wrappers) {
			uow.registerNew(w.resultBL);
			if (w.baseNFL != null) {
				uow.registerNew(w.baseNFL);
			}
			if (w.varNFL != null) {
				uow.registerNew(w.varNFL);
			}
			/// REMAP
			if (w.baseNFL != null) {
				uow.registerRelationship(w.resultBL, CBBudgetLine__c.NFL1__c, w.baseNFL);
			}
			if (w.varNFL != null) {
				uow.registerRelationship(w.resultBL, CBBudgetLine__c.NFL2__c, w.varNFL);
			}
			if (w.staticNFL != null) {
				if (w.varNFL == null) {
					uow.registerRelationship(w.resultBL, CBBudgetLine__c.NFL2__c, w.staticNFL);
				} else {
					uow.registerRelationship(w.resultBL, CBBudgetLine__c.NFL3__c, w.staticNFL);
				}
			}

			for (cblight__CBAmount__c item : w.resultBLAmounts) {
				uow.registerNew(item, CBAmount__c.CBBudgetLine__c, w.resultBL);
			}
		}
		uow.commitWork();
		updatePopulatedNFLsItems(wrappers);
	}

	/**
	 * This method retrieves items from the server, populates them with values from the BL amounts, and commits them to the new UOW.
	 *
	 * @param wrappers
	 */
	private static void updatePopulatedNFLsItems(List<CBCalculationRuleWrapper> wrappers) {
		List<CBCalculationRuleWrapper> clearedWrappers = new List<CBCalculationRuleWrapper>();
		for (CBCalculationRuleWrapper crw : wrappers) if (crw.resultBL.isFormulaBudgetLine__c) clearedWrappers.add(crw);
		wrappers = clearedWrappers;
		if (wrappers.size() == 0) return;

		Set<Id>nFLIds = new Set<Id>();
		for (CBCalculationRuleWrapper w : wrappers) {
			nFLIds.add(w.baseNFL.Id);
			if (w.varNFL != null) {
				nFLIds.add(w.varNFL.Id);
			}
		}

		String filter = 'NonFinancialLibrary__c IN ' + CBUtils.getFormattedINQuery(nFLIds);
		Map<String, CBNonFinancialItem__c> keyToItemMap = new Map<String, CBNonFinancialItem__c>();
		for (CBNonFinancialItem__c item : new CBNonFinancialItemSelector().getNonFinancialItemsByFilter(filter)) {
			keyToItemMap.put((String) item.NonFinancialLibrary__c + (String) item.CBPeriod__c, item);
		}

		fflib_SObjectUnitOfWork uow = new fflib_SObjectUnitOfWork(
				new List<SObjectType>{
						CBNonFinancialItem__c.SObjectType
				}
		);

		for (CBCalculationRuleWrapper w : wrappers) {
			for (cblight__CBAmount__c a : w.sourceBLAmounts) {
				CBNonFinancialItem__c baseItem = keyToItemMap.get((String) w.baseNFL.Id + (String) a.CBPeriod__c);
				baseItem.Value__c = a.Value__c;
				uow.registerDirty(baseItem, CBNonFinancialItem__c.NonFinancialLibrary__c, w.baseNFL);

				if (w.varNFL != null) {
					CBNonFinancialItem__c varItem = keyToItemMap.get((String) w.varNFL.Id + (String) a.CBPeriod__c);
					varItem.Value__c = w.cr.Value__c;
					uow.registerDirty(varItem, CBNonFinancialItem__c.NonFinancialLibrary__c, w.varNFL);
				}
			}
		}
		uow.commitWork();
	}

	/**
	 * The method calculates values from all amounts
	 * @param sourceBudgetLines - List of source Budget Lines
	 * @param periodIdToAmountMap - periodId to Amount map where store calculated result
	 * @return periodId to Amount map
	 */
	public static Map<Id, cblight__CBAmount__c> calcAmountsForGroupedBudgetLine(List<cblight__CBBudgetLine__c> sourceBudgetLines, Map<Id, cblight__CBAmount__c> periodIdToAmountMap) {
		for (cblight__CBBudgetLine__c sourceBL : sourceBudgetLines) {
			for (cblight__CBAmount__c sourceAmount : sourceBL.CBAmounts__r) {
				Id periodId = sourceAmount.CBPeriod__c;
				cblight__CBAmount__c resultAmount = periodIdToAmountMap.get(periodId);
				if (resultAmount == null) {
					resultAmount = new cblight__CBAmount__c(CBPeriod__c = periodId, Value__c = 0);
					periodIdToAmountMap.put(periodId, resultAmount);
				}
				resultAmount.Value__c += sourceAmount.Value__c;
			}
		}
		return periodIdToAmountMap;
	}
	//////////////////////////////////// EXTERNAL METHODS ////////////////////////////////////


}